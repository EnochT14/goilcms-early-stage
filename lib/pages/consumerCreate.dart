import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:hive_db_task_todo/theme/toast.dart';
import 'package:hive_db_task_todo/pages/home_page.dart';

class AdminUserCreationPage extends StatefulWidget {
  @override
  _AdminUserCreationPageState createState() => _AdminUserCreationPageState();
}

class _AdminUserCreationPageState extends State<AdminUserCreationPage> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  List<String> creditDaysOptions = ['0', '14', '21', '30'];
//List<String> regionOptions = ['Greater Accra','Northern Region']; // Replace with actual regions

  String selectedCreditDays = '0';
  String selectedRegion = 'Region 1';

  String selectedRole = 'user'; // Default role is a regular user
  TextEditingController locationController = TextEditingController();
  TextEditingController emailController = TextEditingController();
  TextEditingController phoneController = TextEditingController();
  TextEditingController accountNumberController = TextEditingController();
  TextEditingController consumerNameController = TextEditingController();
  TextEditingController creditDaysController = TextEditingController();
  TextEditingController creditLimitController = TextEditingController();
  TextEditingController discountController = TextEditingController();
  TextEditingController regionController = TextEditingController();

  Future<void> createUser() async {
    try {
      // Create the user in Firebase Authentication
      UserCredential userCredential =
          await _auth.createUserWithEmailAndPassword(
        email: emailController.text.trim(),
        password:
            'tempCMSAccess123', // Temporary password; user will reset it -- TODO: change this for prod
      );

      // Get the user UID generated by Firebase Authentication
      String userUid = userCredential.user!.uid;

      // Create the user document in the "consumer" collection with user UID as document ID
      await _firestore.collection('consumers').doc(userUid).set({
        'name': consumerNameController.text.trim(),
        'email': emailController.text.trim(),
        'phone': phoneController.text.trim(),
        'accountNumber': accountNumberController.text.trim(),
        //'credit': creditDaysController.text.trim(),
        'creditDays': int.parse(selectedCreditDays),
        'creditLimit': creditLimitController.text.trim(),
        'discount': discountController.text.trim(),
        //'region': regionController.text.trim(),
        'region': selectedRegion,
        'location': locationController.text.trim(),
        'isAdmin': selectedRole == 'admin',
        // Add other fields as needed
      });

      // Send a password reset email to prompt the user to set their own password
      await _auth.sendPasswordResetEmail(email: emailController.text.trim());

      showToast(message: "User added to Consumers");

      Navigator.pushReplacementNamed(context, '/home');

      // Display success message
      print('User created successfully');
    } catch (e) {
      print('Error creating user: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Create User Account'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Form fields
            TextField(
              controller: consumerNameController,
              decoration: InputDecoration(labelText: 'Consumer Name'),
            ),
            TextField(
              controller: emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: phoneController,
              decoration: InputDecoration(labelText: 'Phone'),
            ),
            TextField(
              controller: accountNumberController,
              decoration: InputDecoration(labelText: 'Account Number'),
            ),
            DropdownButtonFormField<String>(
              value: selectedCreditDays,
              onChanged: (String? value) {
                setState(() {
                  selectedCreditDays = value!;
                });
              },
              items: creditDaysOptions.map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
              decoration: InputDecoration(labelText: 'Credit Days'),
            ),

            DropdownButtonFormField<String>(
              value: selectedRegion,
              onChanged: (String? value) {
                setState(() {
                  selectedRegion = value!;
                });
              },
              items: <String>['Region 1', 'Region 2', 'Region 3', 'Region 4']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
              decoration: InputDecoration(labelText: 'Region'),
            ),
            TextField(
              controller: creditLimitController,
              decoration: InputDecoration(labelText: 'Credit Limit'),
            ),
            TextField(
              controller: discountController,
              decoration: InputDecoration(labelText: 'Discount'),
            ),
            TextField(
              controller: locationController,
              decoration: InputDecoration(labelText: 'Outlet Location'),
            ),
            /*TextField(
              controller: regionController,
              decoration: InputDecoration(labelText: 'Region'),
            ),*/
            // Dropdown for selecting user role
            DropdownButton<String>(
              value: selectedRole,
              onChanged: (String? value) {
                setState(() {
                  selectedRole = value!;
                });
              },
              items: <String>['user', 'admin']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),
            // Dropdown for selecting user Region
            /*DropdownButton<String>(
              value: selectedRegion,
              onChanged: (String? value) {
                setState(() {
                  selectedRegion = value!;
                });
              },
              items: <String>['Region 1', 'Region 2', 'Region 3', 'Region 4']
                  .map<DropdownMenuItem<String>>((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
            ),*/
            // Button to create the user
            ElevatedButton(
              onPressed: createUser,
              child: Text('Create User'),
            ),
          ],
        ),
      ),
    );
  }
}
